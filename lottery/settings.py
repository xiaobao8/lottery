"""
Django settings for lottery project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
from lottery import configuration

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-!y92k2+kc69&jru&^%idnn#8tsv-6zek7&+&99mp19v0)*bu)f'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = int(configuration.DEBUG)

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    "raffle",
    "django_celery_beat"
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'lottery.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'lottery.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': configuration.DB_NAME,
        'USER': configuration.DB_USER,
        'PASSWORD': configuration.DB_PASS,
        'HOST': configuration.DB_HOST,
        'PORT': configuration.DB_PORT,
        'OPTIONS': {
            'charset': 'utf8mb4',
        },
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{configuration.REDIS_URL}:{configuration.REDIS_PORT}",  # 安装redis的主机的IP和端口
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {
                "max_connections": int(configuration.REDIS_MAX_CONNECTIONS),
                "encoding": "utf-8"
            },
            "PASSWORD": configuration.REDIS_PASSWORD
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

REST_FRAMEWORK = {
    # 序列化时间格式
    "DATETIME_FORMAT": "%Y-%m-%d %H:%M:%S",

    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ]



}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

import os
cur_path = os.path.dirname(os.path.realpath(__file__))  # log_path是存放日志的路径
log_path = os.path.join(os.path.dirname(cur_path), 'logs')
if not os.path.exists(log_path): os.mkdir(log_path)  # 如果不存在这个logs文件夹，就自动创建一个
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        # 日志格式
        'standard': {
            'format': '[%(asctime)s] [%(filename)s:%(lineno)d] [%(module)s:%(funcName)s] '
                      '[%(levelname)s]- %(message)s'},
        'simple': {  # 简单格式
            'format': '%(levelname)s %(message)s'
        },
    },
    # 过滤
    'filters': {
    },
    # 定义具体处理日志的方式
    'handlers': {
        # 输出错误日志
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': "logs/error.log",
            'when': 'midnight',  # this specifies the interval
            'interval': 1,
            'backupCount': 30,  # 备份数
            'formatter': 'standard',  # 输出格式
            'encoding': 'utf-8',  # 设置默认编码，否则打印出来汉字乱码
        },
        # 控制台输出
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
        },
        # 输出info日志
        'info': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': "logs/info.log",
            'when': 'midnight',  # this specifies the interval
            'interval': 1,
            # 'maxBytes': 1024 * 1024 * 5,  # 文件大小
            'backupCount': 30,  # 备份数
            'formatter': 'standard',  # 输出格式
            'encoding': 'utf-8',  # 设置默认编码，否则打印出来汉字乱码
        },

    },
    # 配置用哪几种 handlers 来处理日志
    'loggers': {
        "django": {
            "handlers": ["console", "info"],
            "level": "INFO",
            "propagate": False
        },
        'log': {
            'handlers': ['info', "error"],
            'level': 'INFO',
            'propagate': True
        }
    }
}

# CELERY配置
# 消息队列存放地址
BROKER_URL = configuration.REDIS_CELERY

BROKER_RESULT_URL = configuration.REDIS_CELERY

CELERY_RESULT_BACKEND = configuration.REDIS_CELERY
# 任务序列化和反序列化    pickle
CELERY_TASK_SERIALIZER = 'json'

# 结果序列化格式，默认为pickle
CELERY_RESULT_SERIALIZER = 'json'

# 指定接受的内容类型(默认为允许所有格式)   ['pickle', 'json', 'msgpack', 'yaml']
CELERY_ACCEPT_CONTENT = ['application/json', ]

# 启动时区设置
CELERY_ENABLE_UTC = False
# 设置时区
CELERY_TIMEZONE = TIME_ZONE


# 任务过期时间，600s后结果结束
# CELERY_TASK_TIME_LIMIT= 10 * 60
DJANGO_CELERY_BEAT_TZ_AWARE = False
# 并发的worker数量，也是命令行-c指定的数目，worker数量不是越多越好，保证任务不堆积，加上一些新增任务的预留就可以了
CELERYD_CONCURRENCY = 16
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# celery worker 每次去BROKER中预取任务的数量
CELERYD_PREFETCH_MULTIPLIER = 32

# 每个worker最多执行1000个任务就会被销毁，可防止内存泄露
CELERYD_MAX_TASKS_PER_CHILD = 1000

# 任务过期时间，celery任务执行结果的超时时间
CELERY_TASK_RESULT_EXPIRES = 24 * 60 * 60

# Worker在任务执行完后才向Broker发送acks，告诉队列这个任务已经处理了，可靠性较强，但也可能出现重复执行
CELERY_ACKS_LATE = True
# 设置默认的队列名称，未指定的情况下都会放入默认队列中
CELERY_DEFAULT_QUEUE = "default"
#
